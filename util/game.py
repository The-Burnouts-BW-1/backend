import random
import arcade
import math
import sys

SCREEN_WIDTH = 1024
SCREEN_HEIGHT = 768

SCROLL_WIDTH = 512
SCROLL_HEIGHT = 384

BR_X = 64
BR_Y = 48

VIEWPORT_MARGIN = 200

MOVEMENT_SPEED = 3


class MyApplication(arcade.Window):
    def __init__(self, width, height):
        super().__init__(width, height, "The Dungeon")

        self.set_mouse_visible(False)

        # High Scores
        self.highscore_sound = False
        self.highscore = 0
        file = open("scores.txt")
        for items in file:
            self.highscore = int(items.strip())

        # Game Variables
        self.game_started = False
        self.curtime = 0
        self.score = 0
        self.room = 0

        # Sprite lists
        self.all_sprites_list = None
        self.coin_list = None
        # self.ammo_list = None
        # self.arrow_list = None
        # self.enemy_list = None
        # self.fireball_list = None
        # self.chest_list = None
        # self.potion_list = None
        self.effect_list = None

        # Map Generation Variables
        self.blocks = [[True for useless in range(
            BR_Y)] for useless in range(BR_X)]
        self.doorpos = 0

        # Textures
        self.chest_texture = arcade.load_texture("images/chest_opened.png")
        self.controls = arcade.load_texture("images/controls.png")

    def setup(self):
        # Sprite lists
        self.all_sprites_list = arcade.SpriteList()
        self.wall_list = arcade.SpriteList()
        self.coin_list = arcade.SpriteList()
        # self.ammo_list = arcade.SpriteList()
        # self.arrow_list = arcade.SpriteList()
        # self.enemy_list = arcade.SpriteList()
        # self.fireball_list = arcade.SpriteList()
        self.chest_list = arcade.SpriteList()
        # self.potion_list = arcade.SpriteList()
        self.effect_list = arcade.SpriteList()

        # Map Generation
        self.blocks = [[True for useless in range(
            BR_Y)] for useless in range(BR_X)]
        self.direction = "right"
        self.ng_x = 0
        self.ng_y = 0

        self.physics_engine = arcade.PhysicsEngineSimple(
            self.player_sprite, self.wall_list)
        arcade.set_background_color(arcade.color.BLACK)
        self.generate_map()
        arcade.play_sound(self.sound_list[0])

    def generate_map(self):
        self.blocks[1][5] = False

        self.ng_x = 1
        self.ng_y = 5
        self.direction = "right"
        anti_crash = 0

        # The map is generated by having a "snake" go around the map in random directions until it hits the right wall.
        while anti_crash < 2000:
            anti_crash += 1

            # If the generation gets stuck somehow force it to finish
            if anti_crash > 1999:
                for x in range(BR_X - 1):
                    self.blocks[x][16] = False
                self.blocks[0][16] = True
                self.doorpos = 16
                wall = arcade.Sprite("images/castle_door_open.png", 1)
                wall.center_x = (BR_X - 1) * 32
                wall.center_y = 16 * 32
                self.all_sprites_list.append(wall)
                self.wall_list.append(wall)

            # Keep trying different directions until it's a valid direction.
            valid_movement = False
            while not valid_movement:
                old_ngx = self.ng_x
                old_ngy = self.ng_y
                if self.direction == "right":
                    self.ng_x += 1
                if self.direction == "left":
                    self.ng_x -= 1
                if self.direction == "up":
                    self.ng_y += 1
                if self.direction == "down":
                    self.ng_y -= 1

                if 0 < self.ng_x < BR_X and 0 < self.ng_y < BR_Y - 1:
                    valid_movement = True

                if not valid_movement:
                    self.ng_x = old_ngx
                    self.ng_y = old_ngy
                    self.change_direction()

            # If it's a valid movement set it to a floor block.
            if valid_movement:
                self.blocks[self.ng_x][self.ng_y] = False
                if random.randint(0, 3) == 2:
                    # Every once and while randomly change direction to prevent straight lines from forming.
                    self.change_direction()

            # Create spawn door
            if self.ng_x >= BR_X - 1:
                self.doorpos = self.ng_y
                wall = arcade.Sprite("images/castle_door_open.png", 1)
                wall.center_x = self.ng_x * 32
                wall.center_y = self.ng_y * 32
                self.all_sprites_list.append(wall)
                self.wall_list.append(wall)
                break

        # Create a randomly chosen wall sprite where all the wall blocks should  be.
        wall_textures = []
        wall_textures.append("images/tile_1.png")
        wall_textures.append("images/tile_2.png")
        wall_textures.append("images/tile_3.png")
        wall_textures.append("images/tile_4.png")
        for x in range(BR_X):
            for y in range(BR_Y):
                if self.blocks[x][y]:
                    wall = arcade.Sprite(random.choice(wall_textures), 1)
                    wall.center_x = x * 32
                    wall.center_y = y * 32
                    self.all_sprites_list.append(wall)
                    self.wall_list.append(wall)

        # Create the items and enemies randomly around the map.
        for x in range(BR_X):
            for y in range(BR_Y):
                if not self.blocks[x][y]:
                    # Each time you enter a new room increase the chance for enemies to spawn
                    difficulty = 17 - self.room
                    if difficulty <= 0:
                        difficulty = 0

                    # Randomly place chests
                    if random.randint(1, 50) == 5:
                        chest = arcade.Sprite("images/chest_closed.png", .75)
                        chest.center_x = x * 32
                        chest.center_y = y * 32
                        chest.append_texture(self.chest_texture)
                        self.all_sprites_list.append(chest)
                        self.chest_list.append(chest)

        # Create end door
        wall = arcade.Sprite("images/castle_door_closed.png", 1)
        wall.center_x = 0
        wall.center_y = 5 * 32
        self.all_sprites_list.append(wall)
        self.wall_list.append(wall)

    def on_draw(self):
        arcade.start_render()

        # Draw all the sprites.
        self.effect_list.draw()
        self.chest_list.draw()
        # self.arrow_list.draw()
        # self.fireball_list.draw()
        self.wall_list.draw()
        # self.player_sprite.draw()
        # self.enemy_list.draw()
        # self.potion_list.draw()
        self.coin_list.draw()
        # self.ammo_list.draw()
